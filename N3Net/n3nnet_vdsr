#dev-Nayan
class VDSR_block:
    
    def vdsr_call(self,inp_s,lb=False):
        input_shape=inp_s
        model = Sequential()
        model.add(Conv2D(64, kernel_size=(3,3),padding="same", input_shape=input_shape))
        model.add(BatchNormalization())
        model.add(Activation('relu'))

        model.add(Conv2D(64, kernel_size=(3,3),padding="same", input_shape=input_shape))
        model.add(BatchNormalization())
        model.add(Activation('relu'))

        model.add(Conv2D(64, kernel_size=(3,3),padding="same", input_shape=input_shape))
        model.add(BatchNormalization())
        model.add(Activation('relu'))

        model.add(Conv2D(64, kernel_size=(3,3),padding="same", input_shape=input_shape))
        model.add(BatchNormalization())
        model.add(Activation('relu'))

        model.add(Conv2D(64, kernel_size=(3,3),padding="same", input_shape=input_shape))
        model.add(BatchNormalization())
        model.add(Activation('relu'))

        model.add(Conv2D(64, kernel_size=(3,3),padding="same", input_shape=input_shape))
        model.add(BatchNormalization())
        model.add(Activation('relu'))

        if lb==True:
            model.add(Conv2D(8, kernel_size=(3,3),padding="same", input_shape=input_shape))
        else:
            model.add(Conv2D(1, kernel_size=(3,3),padding="same", input_shape=input_shape))
        return model
